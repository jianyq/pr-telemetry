version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pr-telemetry-postgres
    environment:
      POSTGRES_USER: telemetry
      POSTGRES_PASSWORD: telemetry_dev_password
      POSTGRES_DB: pr_telemetry
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry -d pr_telemetry"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pr-telemetry-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: pr-telemetry-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc:latest
    container_name: pr-telemetry-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/pr-telemetry-artifacts || true;
      mc mb myminio/pr-telemetry-chunks || true;
      mc mb myminio/pr-telemetry-traces || true;
      echo 'Buckets created successfully';
      exit 0;
      "

  api:
    build:
      context: .
      dockerfile: infra/Dockerfile.api
    container_name: pr-telemetry-api
    environment:
      DATABASE_URL: postgresql://telemetry:telemetry_dev_password@postgres:5432/pr_telemetry
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_SECURE: "false"
      AUTH_TOKEN: dev_token_12345
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    volumes:
      - ./api:/app/api
      - ./worker:/app/worker
    command: >
      sh -c "
      alembic upgrade head &&
      uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
      "

  worker:
    build:
      context: .
      dockerfile: infra/Dockerfile.worker
    container_name: pr-telemetry-worker
    environment:
      DATABASE_URL: postgresql://telemetry:telemetry_dev_password@postgres:5432/pr_telemetry
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_SECURE: "false"
      LOG_LEVEL: INFO
      OPENAI_API_KEY: ${OPENAI_API_KEY:-mock}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./api:/app/api
      - ./worker:/app/worker
      - /var/run/docker.sock:/var/run/docker.sock
    command: celery -A worker.tasks worker --loglevel=info --concurrency=2

volumes:
  postgres_data:
  minio_data:

